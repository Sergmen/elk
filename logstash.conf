input {
   file {
      start_position => "beginning"
      path => "/usr/share/logstash/input/*.log"
     }
}

filter {
  mutate {
      gsub => [
        "path", "docker-", "",
        "path", ".log", "",
        "message", "^[^{]*", ""
      ]
      split => { "path" => "/" }
  }
  json {
    source => "message"
  }

  if "_jsonparsefailure" in [tags] {
       grok {
         match => { "message" => "%{TIMESTAMP_ISO8601:time}" }
       }
       grok {
         match => { "message" => "%{LOGLEVEL:level}" }
       }
  }

  date{
    match => ["time", "yyyy-MM-dd HH:mm:ss,SSS"]
    target => "@timestamp"
    timezone => "Europe/Moscow"
  }
  ruby {
    code => "event.set('indexDay', event.get('[@timestamp]').time.strftime('%Y%m%d'))
             event.set('service', event.get('path')[-1])
    "
  }
  mutate {
       remove_field => ['path']
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    template => "/usr/share/logstash/templates/logstash.template.json"
    template_name => "logstash"
    template_overwrite => true
    index => "%{service}-%{indexDay}"
    codec => json
  }
  stdout {
    codec => rubydebug
  }
}
